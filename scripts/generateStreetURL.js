const fs = require('fs');
const path = require('path');
const { chromium } = require('playwright');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —á–∞—Å—Ç–∏–Ω–∏ URL –ø—ñ—Å–ª—è —Å–∏–º–≤–æ–ª—É #
function cleanURL(url) {
  const hashIndex = url.indexOf('#');
  return hashIndex !== -1 ? url.substring(0, hashIndex) : url;
}

(async () => {
  // –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∑ –æ–±'—î–∫—Ç–∞–º–∏
  const jsonPath = path.join(__dirname, '../internal/objects/parsed_objects.json');
  const rawData = fs.readFileSync(jsonPath, 'utf-8');
  let objects;
  try {
    objects = JSON.parse(rawData);
  } catch (e) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON:', e.message);
    process.exit(1);
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ–±'—î–∫—Ç—ñ–≤
  if (!Array.isArray(objects) || objects.length === 0) {
    console.error('‚ùå –£ —Ñ–∞–π–ª—ñ –Ω–µ–º–∞—î –æ–± º—î–∫—Ç—ñ–≤');
    process.exit(1);
  }

  // –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∑ –ø–æ—à—É–∫–æ–≤–∏–º–∏ URL
  const searchURLsPath = path.join(__dirname, '../internal/objects/search_URLs.json');
  if (!fs.existsSync(searchURLsPath)) {
    fs.writeFileSync(searchURLsPath, JSON.stringify([], null, 2));
  }
  const savedURLs = JSON.parse(fs.readFileSync(searchURLsPath, 'utf-8'));

  // –û—á–∏—â–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –∑–∞ URL
  const uniqueURLs = [];
  const seen = new Set();
  for (const entry of savedURLs) {
    if (!seen.has(entry.url)) {
      seen.add(entry.url);
      uniqueURLs.push(entry);
    }
  }

  if (uniqueURLs.length !== savedURLs.length) {
    fs.writeFileSync(searchURLsPath, JSON.stringify(uniqueURLs, null, 2), 'utf-8');
    console.log('üßπ –í–∏–¥–∞–ª–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –∑—ñ search_URLs.json');
  }
  savedURLs.length = 0;
  savedURLs.push(...uniqueURLs);

  // –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞
  const browser = await chromium.launch({ headless: false });
  const page = await browser.newPage();

  // –û–±—Ä–æ–±–∫–∞ –∫–æ–∂–Ω–æ–≥–æ –æ–±'—î–∫—Ç—É
  for (const obj of objects) {
    const { title, location, price, rooms, category, region, link } = obj;

    // –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
    const commaIndex = title.indexOf(',');
    if (commaIndex === -1) {
      console.error('‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ title: –≤—ñ–¥—Å—É—Ç–Ω—è –∫–æ–º–∞');
      continue;
    }

    const part1 = title.slice(0, commaIndex).trim();
    const part2 = title.slice(commaIndex + 1).trim();
    let street = `${part1} (${location}), ${part2}`;
    console.log(`üîç –í—É–ª–∏—Ü—è –¥–ª—è –ø–æ—à—É–∫—É: ${street}`);

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–∑–æ–≤–æ–≥–æ URL
    const categoryIndex = link.indexOf(`/${category}/`);
    if (categoryIndex === -1) {
      console.error(`‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ category "${category}" —É –ª—ñ–Ω–∫—É: ${link}`);
      continue;
    }

    const baseURL = link.substring(0, categoryIndex + category.length + 2);
    console.log(`üåê –ü–µ—Ä–µ—Ö—ñ–¥ –∑–∞ URL: ${baseURL}`);
    await page.goto(baseURL, { timeout: 5000 });

    // –í–≤–µ–¥–µ–Ω–Ω—è –≤—É–ª–∏—Ü—ñ —É –ø–æ—à—É–∫
    const inputSelector = 'input.nav_street_input';
    const inputLocator = page.locator(inputSelector);
    await inputLocator.waitFor();

    // –ü–æ—à—É–∫ –≤—É–ª–∏—Ü—ñ –∑ —Ä–∞–π–æ–Ω–æ–º —ñ –∑ –Ω–æ–º–µ—Ä–æ–º –±—É–¥–∏–Ω–∫—É
    let found = await trySearchStreet(page, street, inputSelector);

    // –ü–æ—à—É–∫ –≤—É–ª–∏—Ü—ñ –±–µ–∑ —Ä–∞–π–æ–Ω—É
    if (!found) {
      street = `${part1}, ${part2}`;
      console.log(`üîç –í—É–ª–∏—Ü—è –¥–ª—è –ø–æ—à—É–∫—É –±–µ–∑ —Ä–∞–π–æ–Ω—É: ${street}`);
      found = await trySearchStreet(page, street, inputSelector);
    }

    // –ü–æ—à—É–∫ –≤—É–ª–∏—Ü—ñ –∑ —Ä–∞–π–æ–Ω–æ–º, –∞–ª–µ –±–µ–∑ –Ω–æ–º–µ—Ä—É –±—É–¥–∏–Ω–∫—É
    if (!found) {
      street = `${part1} (${location})`;
      console.log(`üîç –í—É–ª–∏—Ü—è –¥–ª—è –ø–æ—à—É–∫—É (—Ä–∞–π–æ–Ω, –±–µ–∑ –Ω–æ–º–µ—Ä—É): ${street}`);
      found = await trySearchStreet(page, street, inputSelector);
    }

    // –ü–æ—à—É–∫ –ª–∏—à–µ –≤—É–ª–∏—Ü—ñ –±–µ–∑ —Ä–∞–π–æ–Ω—É —ñ –±–µ–∑ –Ω–æ–º–µ—Ä—É –±—É–¥–∏–Ω–∫—É
    if (!found) {
      street = `${part1}`;
      console.log(`üîç –í—É–ª–∏—Ü—è –¥–ª—è –ø–æ—à—É–∫—É (–±–µ–∑ —Ä–∞–π–æ–Ω—É, –±–µ–∑ –Ω–æ–º–µ—Ä—É): ${street}`);
      const searchPromise = trySearchStreet(page, street, inputSelector);
      const timeoutPromise = new Promise(resolve => setTimeout(() => resolve(false), 3000)); // –¢–∞–π–º–∞—É—Ç 3 —Å–µ–∫—É–Ω–¥–∏

      found = await Promise.race([searchPromise, timeoutPromise]);
      if (!found) {
        console.log(`‚ö†Ô∏è –í—É–ª–∏—Ü—è "${street}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∑–∞ 3 —Å–µ–∫—É–Ω–¥–∏, –ø–µ—Ä–µ—Ö–æ–¥–∂—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –µ—Ç–∞–ø—É.`);
      }
    }

    // –ü–æ—à—É–∫ –ª–∏—à–µ –∑–∞ —Ä–∞–π–æ–Ω–æ–º
    if (!found) {
      street = `${location}`;
      console.log(`üîç –ü–æ—à—É–∫ –ª–∏—à–µ –∑–∞ —Ä–∞–π–æ–Ω–æ–º: ${street}`);
      found = await trySearchStreet(page, street, inputSelector);
    }

    if (!found) continue;

    // –í–∏–±–∏—Ä–∞—î–º–æ –≤—É–ª–∏—Ü—é –∑ —Ä–∞–π–æ–Ω–æ–º, —è–∫—â–æ –≤–æ–Ω–∞ –∑–Ω–∞–π–¥–µ–Ω–∞
    if (found) {
      if (street === location) {
        const districtOnly = location.replace(/—Ä-–Ω/g, '—Ä–∞–π–æ–Ω');
        await page.click(`div.nav_item_option:has-text("${districtOnly}")`);
      } else {
        await page.click(`div.nav_item_option[data-title="${street}"]`);
      }
      await page.waitForTimeout(500);
    }

    await page.click('div.nav_item_active[data-standart="–¶—ñ–Ω–∞"]');
    await page.waitForSelector('.currency-switcher', { timeout: 1000 });

    const cleanPriceStr = price.replace(/[^\d]/g, '');
    const priceTo = parseInt(cleanPriceStr, 10);
    const priceFrom = Math.round(priceTo * 0.85);

    let currencyCode = '2'; // –î–æ–ª–∞—Ä –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    if (price.includes('–≥—Ä–Ω')) {
      currencyCode = '1';
    } else if (price.includes('$')) {
      currencyCode = '2';
    } else if (price.includes('‚Ç¨')) {
      currencyCode = '3';
    } else {
      console.warn(`‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç–∏ –≤ —Ä—è–¥–∫—É: "${price}", –æ–±–∏—Ä–∞—î–º–æ –¥–æ–ª–∞—Ä –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º`);
    }

    await page.click(`.currency-switcher__currency[data-currency="${currencyCode}"]`);
    await page.waitForTimeout(500);
    await page.fill('.filter-field__input.js_input_from', priceFrom.toString());
    await page.fill('.filter-field__input.js_input_to', priceTo.toString());
    await page.click('button.filter__apply-button:visible');
    await page.waitForTimeout(500);

    // –í–≤–µ–¥–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫—ñ–º–Ω–∞—Ç, —è–∫—â–æ —Ü–µ –Ω–µ –±—É–¥–∏–Ω–æ–∫ –∞–±–æ –∑–µ–º–µ–ª—å–Ω–∞ –¥—ñ–ª—è–Ω–∫–∞
    if (!['houses-sale', 'areas-sale'].includes(category)) {
      await page.click('div.nav_item_active[data-standart="–ö—ñ–º–Ω–∞—Ç"]');
      await page.waitForSelector('.filter-room-count-options');

      const roomNumber = rooms.toLowerCase().includes('—Å—Ç—É–¥—ñ—è')
        ? '–°—Ç—É–¥—ñ—è'
        : rooms.match(/\d+/)?.[0] || null;

      if (!roomNumber) {
        console.warn('‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç');
      } else {
        const roomSelector =
          roomNumber === '–°—Ç—É–¥—ñ—è'
            ? `.filter-room-count__option[data-title="–°—Ç—É–¥—ñ—è"]`
            : `.filter-room-count__option[data-title="${roomNumber}"]`;

        await page.locator(roomSelector).click({ force: true });
        await page.waitForTimeout(500);

        const applyButton = page.locator('button.filter__apply-button:visible').nth(2);
        await applyButton.click({ position: { x: 0, y: 0 }, force: true });
      }
    }

    await page.click('button.nav_search_btn');
    await page.waitForTimeout(1000);

    const finalURL = page.url();
    const cleanedFinalURL = cleanURL(finalURL); // –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó cleanURL
    console.log(`‚úÖ URL –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: ${cleanedFinalURL}`);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è URL
    if (!savedURLs.some(item => item.url === cleanedFinalURL)) {
      savedURLs.push({ title, url: cleanedFinalURL });
      fs.writeFileSync(searchURLsPath, JSON.stringify(savedURLs, null, 2), 'utf-8');
      console.log('üíæ URL –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É search_URLs.json');
    } else {
      console.log('‚ÑπÔ∏è URL –≤–∂–µ —ñ—Å–Ω—É—î —É search_URLs.json, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
    }
  }

  await browser.close();
})();

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–ø—Ä–æ–±–∏ –ø–æ—à—É–∫—É –≤—É–ª–∏—Ü—ñ
async function trySearchStreet(page, street, inputSelector) {
  const inputLocator = page.locator(inputSelector);
  await inputLocator.waitFor();
  await inputLocator.click();
  await inputLocator.fill(''); // –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ª—è –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º –ø–æ—à—É–∫–æ–º

  for (const char of street.slice(0, 4)) {
    await page.keyboard.type(char);
    await page.dispatchEvent(inputSelector, 'input');
    await page.dispatchEvent(inputSelector, 'keydown');
    await page.dispatchEvent(inputSelector, 'keyup');
    await page.waitForTimeout(500);
  }

  await page.waitForTimeout(1000);
  await page.waitForSelector('div.nav_item_option[data-title]', { timeout: 5000 });

  let items = await page.$$eval('div.nav_item_option[data-title]', options =>
    options.map(o => o.getAttribute('data-title'))
  );

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –≤—É–ª–∏—Ü—ñ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ä—ñ–∑–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è —Ä–∞–π–æ–Ω—É
  const locationVariants = [
    street,
    street.replace(/—Ä-–Ω/g, '—Ä–∞–π–æ–Ω'),
    street.replace(/—Ä–∞–π–æ–Ω/g, '—Ä-–Ω')
  ];

  const foundVariant = items.some(item => locationVariants.some(variant => item.includes(variant)));
  if (foundVariant) {
    return true;
  } else {
    console.error(`\n‚ùå –í—É–ª–∏—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: "${street}"`);
    return false;
  }
}
