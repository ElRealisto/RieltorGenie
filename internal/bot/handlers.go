package bot

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"path/filepath"

	"github.com/ElRealisto/RieltorGenie/internal/objects"
	"github.com/ElRealisto/RieltorGenie/internal/users"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// Property –æ–ø–∏—Å—É—î –æ–±'—î–∫—Ç –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ
type Property struct {
	Title        string `json:"title"`
	Price        string `json:"price"`
	Link         string `json:"link"`
	Category     string `json:"category"`
	Rooms        string `json:"rooms"`
	Area         string `json:"area"`
	FloorDetails string `json:"floorDetails"`
	LandPlot     string `json:"landPlot,omitempty"` // –î–æ–¥–∞–Ω–æ –¥–ª—è –±—É–¥–∏–Ω–∫—ñ–≤
}

// HandleUpdate –æ–±—Ä–æ–±–ª—è—î –≤—Ö—ñ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è Telegram
func HandleUpdate(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	if update.Message == nil && update.CallbackQuery == nil {
		return
	}

	// –û–±—Ä–æ–±–∫–∞ –≤–±—É–¥–æ–≤–∞–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫
	if update.CallbackQuery != nil {
		callback := tgbotapi.NewCallback(update.CallbackQuery.ID, "")
		if _, err := bot.Request(callback); err != nil {
			log.Printf("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è callback: %v", err)
		}

		switch update.CallbackQuery.Data {
		case "load_objects":
			// –õ–æ–≥—ñ–∫–∞ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤ –∑ —Ñ–∞–π–ª—É
			handleLoadObjects(bot, update.CallbackQuery.Message)
		case "update_objects":
			// –õ–æ–≥—ñ–∫–∞ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤
			handleParseCommand(bot, update.CallbackQuery.Message)
		}
		return
	}

	// –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
	switch update.Message.Text {
	case "/–ø–∞—Ä—Å–∏—Ç–∏":
		handleParseCommand(bot, update.Message)
	default:
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "ü§ñ –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –°–ø—Ä–æ–±—É–π—Ç–µ /–ø–∞—Ä—Å–∏—Ç–∏")
		bot.Send(msg)
	}
}

// handleLoadObjects –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î –æ–±'—î–∫—Ç–∏ –∑ —Ñ–∞–π–ª—É —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —ó—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
func handleLoadObjects(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	filePath := filepath.Join("internal", "objects", "parsed_objects.json")

	// –ß–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É
	fileContent, err := os.ReadFile(filePath)
	if err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É.")
		bot.Send(msg)
		return
	}

	// –†–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON
	var properties []Property
	err = json.Unmarshal(fileContent, &properties)
	if err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø–∞—Ä—Å–∏–Ω–≥—É JSON: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞–Ω–∏—Ö.")
		bot.Send(msg)
		return
	}

	// –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ–±'—î–∫—Ç–∞–º–∏
	responseMessage := fmt.Sprintf("–ù–∞—Ä–∞–∑—ñ –í–∏ —Ä–µ–∫–ª–∞–º—É—î—Ç–µ %d –æ–±'—î–∫—Ç—ñ–≤:\n\n", len(properties))
	for i, property := range properties {
		categoryDescription := getCategoryDescription(property.Category)
		responseMessage += fmt.Sprintf("%d. üè† –ù–∞–∑–≤–∞: %s\nüí∞ –¶—ñ–Ω–∞: %s\nüîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è: %s\nüè° –ö—ñ–º–Ω–∞—Ç–∏: %s\nüìè –ü–ª–æ—â–∞: %s\nüè¢ –ü–æ–≤–µ—Ä—Ö: %s\nüìå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: %s\n\n",
			i+1, property.Title, property.Price, property.Link, property.Rooms, property.Area, property.FloorDetails, categoryDescription)
	}

	// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ–±'—î–∫—Ç–∞–º–∏
	msg := tgbotapi.NewMessage(message.Chat.ID, responseMessage)
	bot.Send(msg)

	// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –∑–Ω–æ–≤—É
	sendWithInlineButtons(bot, message.Chat.ID, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:")
}

// sendWithInlineButtons –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–±—É–¥–æ–≤–∞–Ω–æ—é –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
func sendWithInlineButtons(bot *tgbotapi.BotAPI, chatID int64, message string) {
	msg := tgbotapi.NewMessage(chatID, message)

	// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–±—É–¥–æ–≤–∞–Ω–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∫–Ω–æ–ø–∫–∞–º–∏
	inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –æ–±'—î–∫—Ç–∏", "load_objects"),
			tgbotapi.NewInlineKeyboardButtonData("–û–Ω–æ–≤–∏—Ç–∏ –æ–±'—î–∫—Ç–∏", "update_objects"),
		),
	)

	msg.ReplyMarkup = inlineKeyboard

	if _, err := bot.Send(msg); err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %v", err)
	}
}

// getCategoryDescription –ø–æ–≤–µ—Ä—Ç–∞—î –æ–ø–∏—Å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
func getCategoryDescription(category string) string {
	switch category {
	case "flats-sale":
		return "–ü—Ä–æ–¥–∞–∂ –∫–≤–∞—Ä—Ç–∏—Ä–∏"
	case "flats-rent":
		return "–û—Ä–µ–Ω–¥–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∏"
	case "houses-sale":
		return "–ü—Ä–æ–¥–∞–∂ –±—É–¥–∏–Ω–∫—É"
	case "areas-sale":
		return "–ü—Ä–æ–¥–∞–∂ –∑–µ–º–ª—ñ"
	case "commercials-sale":
		return "–ü—Ä–æ–¥–∞–∂ –∫–æ–º–µ—Ä—Ü—ñ–π–Ω–æ—ó –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ"
	case "commercials-rent":
		return "–û—Ä–µ–Ω–¥–∞ –∫–æ–º–µ—Ä—Ü—ñ–π–Ω–æ—ó –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ"
	default:
		return "–Ü–Ω—à–µ"
	}
}

// handleParseCommand –∑–∞–ø—É—Å–∫–∞—î –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è —Ä—ñ—î–ª—Ç–æ—Ä–∞
func handleParseCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	// –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π Telegram ID
	telegramID := message.Chat.ID
	fmt.Printf("üîç –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Telegram ID: %d\n", telegramID)

	user := users.FindByTelegramID(telegramID)
	if user == nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, "üö´ –í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –±–∞–∑—ñ —Ä—ñ—î–ª—Ç–æ—Ä—ñ–≤.")
		bot.Send(msg)
		return
	}

	fmt.Printf("üîç –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: %+v\n", user)

	if user.Role != users.RealtorRole {
		msg := tgbotapi.NewMessage(message.Chat.ID, "üö´ –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ —Ä—ñ—î–ª—Ç–æ—Ä–∞–º.")
		bot.Send(msg)
		return
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, "üîç –†–æ–∑–ø–æ—á–∞—Ç–æ –ø–∞—Ä—Å–∏–Ω–≥ –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é...")
	bot.Send(msg)

	properties, err := objects.ParseRealtorProfile(user.ProfileURL)
	if err != nil {
		log.Printf("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –ø—Ä–æ—Ñ—ñ–ª—é %s: %v", user.ProfileURL, err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É –ø—Ä–æ—Ñ—ñ–ª—é.")
		bot.Send(msg)
		return
	}

	outputPath := filepath.Join("internal", "objects", "parsed_objects.json")
	err = objects.SavePropertiesToFile(properties, outputPath)
	if err != nil {
		log.Printf("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è JSON: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö.")
		bot.Send(msg)
		return
	}

	log.Printf("‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ %d –æ–±'—î–∫—Ç—ñ–≤ —É %s", len(properties), outputPath)
	msg = tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ %d –æ–±'—î–∫—Ç—ñ–≤!", len(properties)))
	bot.Send(msg)
}
