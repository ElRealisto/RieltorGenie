package users

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"runtime"
	"strings"

	"github.com/PuerkitoBio/goquery"
)

type UserRole string

const (
	AdminRole   UserRole = "admin"
	RealtorRole UserRole = "realtor"
)

type User struct {
	TelegramID int64    `json:"telegram_id"`
	ProfileURL string   `json:"profile_url"`
	Name       string   `json:"name"`
	Role       UserRole `json:"role"`
}

var users []User

var usersFile string

func init() { // –§–∞–π–ª users.json –∑–∞–≤–∂–¥–∏ –±—É–¥–µ —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω–∏–π –≤ –ø–∞–ø—Ü—ñ users
	_, filename, _, _ := runtime.Caller(0)
	dir := filepath.Dir(filename)
	usersFile = filepath.Join(dir, "users.json")
}

func LoadUsers() error {
	file, err := os.Open(usersFile)
	if err != nil {
		return fmt.Errorf("–Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª: %v", err)
	}
	defer file.Close()

	decoder := json.NewDecoder(file)
	err = decoder.Decode(&users)
	if err != nil {
		return fmt.Errorf("–Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞–∫—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –∑ —Ñ–∞–π–ª—É: %v", err)
	}

	// –ü–∞—Ä—Å–∏–º–æ —ñ–º‚Äô—è –ª–∏—à–µ –¥–ª—è —Ä—ñ–µ–ª—Ç–æ—Ä—ñ–≤ –∑ –ø–æ—Ä–æ–∂–Ω—ñ–º –ø–æ–ª–µ–º Name
	needSave := false
	for i := range users {
		if users[i].Role == RealtorRole && users[i].Name == "" {
			name, err := ParseNameFromProfile(users[i].ProfileURL)
			if err != nil {
				fmt.Printf("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–∞—Ä—Å–∏—Ç–∏ —ñ–º'—è –¥–ª—è —Ä—ñ–µ–ª—Ç–æ—Ä–∞ %d: %v\n", users[i].TelegramID, err)
			} else {
				users[i].Name = name
				needSave = true
			}
		}
	}

	// –ó–ë–ï–†–ï–ì–¢–ò –û–ù–û–í–õ–ï–ù–Ü –Ü–ú–ï–ù–ê
	if needSave {
		return SaveUsers()
	}
	return nil
}

func SaveUsers() error {
	file, err := os.Create(usersFile)
	if err != nil {
		return err
	}
	defer file.Close()

	enc := json.NewEncoder(file)
	enc.SetIndent("", "  ")
	return enc.Encode(users)
}

func GetAll() []User {
	return users
}

func FindByTelegramID(id int64) *User {
	for i := range users {
		if users[i].TelegramID == id {
			fmt.Printf("üîç –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: %+v\n", users[i])
			return &users[i]
		}
	}
	fmt.Println("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
	return nil
}

func InitDefaultUsers() {
	if _, err := os.Stat(usersFile); os.IsNotExist(err) {
		users = []User{
			{TelegramID: 5679227412, Role: AdminRole, Name: "–ö–∏—Ä–∏–ª–æ"},
			{TelegramID: 5264545653, Role: RealtorRole, ProfileURL: "https://0934608270.rieltor.ua"},
		}
		_ = SaveUsers()
	}

	// –í–ê–ñ–õ–ò–í–û: –ó–∞–≤–∂–¥–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ –ø–∞—Ä—Å–∏—Ç–∏ —ñ–º–µ–Ω–∞, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —Ñ–∞–π–ª —â–æ–π–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ
	err := LoadUsers()
	if err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: %v", err)
	}

	// –î–æ–¥–∞—Ç–∫–æ–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
	fmt.Println("üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:")
	for _, user := range users {
		fmt.Printf("üë§ %+v\n", user)
	}
}

func ParseNameFromProfile(url string) (string, error) {
	client := &http.Client{}
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return "", fmt.Errorf("–Ω–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç: %v", err)
	}

	req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "+
		"AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36")

	resp, err := client.Do(req)
	if err != nil {
		return "", fmt.Errorf("–Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		return "", fmt.Errorf("–Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å: %v", resp.Status)
	}

	bodyBytes, _ := io.ReadAll(resp.Body)
	// –ó–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–æ –ø—ñ—Å–ª—è –¥–µ–±–∞–≥—É ‚Äî –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ –º–æ–∂–Ω–∞ —Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏:
	// fmt.Println("üßæ HTML —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø—Ä–æ—Ñ—ñ–ª—é:\n", string(bodyBytes))

	doc, err := goquery.NewDocumentFromReader(bytes.NewReader(bodyBytes))
	if err != nil {
		return "", fmt.Errorf("–Ω–µ –≤–¥–∞–ª–æ—Å—è –ø–∞—Ä—Å–∏—Ç–∏ HTML: %v", err)
	}

	selection := doc.Find(".rieltor_card__name")
	if selection.Length() == 0 {
		return "", fmt.Errorf("–Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç –∑ –∫–ª–∞—Å–æ–º rieltor_card__name")
	}

	name := strings.TrimSpace(selection.First().Text())
	if name == "" {
		return "", fmt.Errorf("–Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —ñ–º‚Äô—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ")
	}
	return name, nil
}

func PrintDebugInfo(users []User) string {
	var report strings.Builder
	report.WriteString("üß™ –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n")
	for _, u := range users {
		report.WriteString(fmt.Sprintf("- [%s] %d: %s (%s)\n", u.Role, u.TelegramID, u.Name, u.ProfileURL))
	}
	return report.String()
}
