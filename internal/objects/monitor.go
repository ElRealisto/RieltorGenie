package objects

import (
	"context"
	"fmt"
	"log"
	"net/url"
	"regexp"
	"strconv"
	"strings"
	"time"

	"github.com/ElRealisto/RieltorGenie/internal/users"
	"github.com/chromedp/chromedp"
)

// SearchResult –æ–ø–∏—Å—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—à—É–∫—É
type SearchResult struct {
	Title    string `json:"title"`
	Price    string `json:"price"`
	Link     string `json:"link"`
	Position int    `json:"position"`
	PostedBy string `json:"posted_by"`
}

// SearchResults –æ–ø–∏—Å—É—î —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É
type SearchResults struct {
	Results []SearchResult `json:"search_results"`
}

// StartMonitoring –∑–∞–ø—É—Å–∫–∞—î –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–π —Ü–∏–∫–ª –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ –ø–æ–∑–∏—Ü—ñ–π –æ–±'—î–∫—Ç—ñ–≤
func StartMonitoring(realtors []users.User) {
	fmt.Println("üöÄ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü—ñ–π –æ–±'—î–∫—Ç—ñ–≤ –∑–∞–ø—É—â–µ–Ω–æ")

	go func() {
		for {
			for _, realtor := range realtors {
				if realtor.Role != users.RealtorRole {
					continue
				}

				// –û—Ç—Ä–∏–º–∞—Ç–∏ –æ–±'—î–∫—Ç–∏ —Ü—å–æ–≥–æ —Ä—ñ–µ–ª—Ç–æ—Ä–∞
				objects := GetObjectsForRealtor(realtor.ProfileURL)

				// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ –æ–±'—î–∫—Ç–∏ —Ä—ñ–µ–ª—Ç–æ—Ä–∞
				for i, obj := range objects {
					fmt.Printf("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±'—î–∫—Ç–∞ %d (%s) —Ä—ñ–µ–ª—Ç–æ—Ä–∞ %s...\n", i+1, obj.Title, realtor.Name)
					CheckObjectPosition(obj, realtor)
					time.Sleep(10 * time.Second) // –ü–∞—É–∑–∞ –º—ñ–∂ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏ –æ–±'—î–∫—Ç—ñ–≤
				}
			}

			// –ü–∞—É–∑–∞ –º—ñ–∂ —Ü–∏–∫–ª–∞–º–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 3 —Ö–≤–∏–ª–∏–Ω–∏)
			time.Sleep(3 * time.Minute)
		}
	}()
}

// GetObjectsForRealtor ‚Äî –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î –æ–±'—î–∫—Ç–∏ –∑ parsed_objects.json
func GetObjectsForRealtor(profileURL string) []Property {
	all, err := LoadParsedObjects()
	if err != nil {
		log.Printf("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–± º—î–∫—Ç—ñ–≤: %v", err)
		return nil
	}

	// –¢–∏–º—á–∞—Å–æ–≤–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—Å—ñ –æ–±'—î–∫—Ç–∏ –±–µ–∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
	return all
}

// CheckObjectPosition ‚Äî –æ—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–∑–∏—Ü—ñ—ó –æ–±'—î–∫—Ç–∞
func CheckObjectPosition(obj Property, realtor users.User) {
	ctx, cancel := chromedp.NewContext(context.Background())
	defer cancel()

	var allRealtors []string

	// –§–æ—Ä–º—É—î–º–æ URL –¥–ª—è –ø–æ—à—É–∫—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞–Ω–∏—Ö –æ–±'—î–∫—Ç–∞
	priceMin, priceMax := calculatePriceRange(obj.Price)
	streetName := url.QueryEscape(obj.Title)
	searchURL := fmt.Sprintf("https://rieltor.ua/%s/%s-rooms/?currency=2&price_min=%d&price_max=%d&radius=20&sort=-default&street_name=%s#15.59/50.435089/30.511846",
		obj.Category,
		strings.TrimSuffix(obj.Rooms, " –∫—ñ–º–Ω–∞—Ç–∏"),
		priceMin,
		priceMax,
		streetName)

	fmt.Printf("üîç –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ—à—É–∫—É –∑–∞ URL: %s\n", searchURL)

	// –í–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ–π –∑ chromedp
	var actions []chromedp.Action

	actions = append(actions,
		chromedp.Navigate(searchURL),
		chromedp.WaitVisible("div.catalog-items-container", chromedp.ByQuery),
		chromedp.Evaluate(`Array.from(document.querySelectorAll('div.catalog-items-container button.button-link.catalog-card-author-title')).slice(0, 3).map(el => el.innerText)`, &allRealtors),
		chromedp.ActionFunc(func(ctx context.Context) error {
			fmt.Println("üîç –ü–µ—Ä–µ–ª—ñ–∫ –ø–µ—Ä—à–∏—Ö —Ç—Ä—å–æ—Ö —Ä—ñ–µ–ª—Ç–æ—Ä—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ:")
			for i, realtor := range allRealtors {
				fmt.Printf("%d. %s\n", i+1, realtor)
			}
			return nil
		}),
	)

	err := chromedp.Run(ctx, actions...)
	if err != nil {
		log.Printf("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø–æ–∑–∏—Ü—ñ—ó –æ–±'—î–∫—Ç–∞: %v", err)
		return
	}

	fmt.Printf("üß™ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –æ–±'—î–∫—Ç–∞ '%s' (%s) —Ä—ñ–µ–ª—Ç–æ—Ä–∞ %s...\n", obj.Title, obj.Link, realtor.Name)

	if len(allRealtors) > 0 {
		if !strings.EqualFold(allRealtors[0], realtor.Name) {
			fmt.Printf("‚ö†Ô∏è –û–±'—î–∫—Ç '%s' –Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó 1, –∞–ª–µ –π–æ–≥–æ —Ä–æ–∑–º—ñ—Å—Ç–∏–≤(–ª–∞) —ñ–Ω—à–∏–π —Ä—ñ–µ–ª—Ç–æ—Ä: %s\n",
				obj.Title, allRealtors[0])
			// TODO: –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –±–æ—Ç
		} else {
			fmt.Printf("‚úÖ –û–±'—î–∫—Ç '%s' –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó 1, –≤—Å–µ –≥–∞—Ä–∞–∑–¥\n", obj.Title)
		}
	}
}

// calculatePriceRange –æ–±—á–∏—Å–ª—é—î –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —ñ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —Ü—ñ–Ω—É –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º 15% –∑–Ω–∏–∂–∫–∏
func calculatePriceRange(priceStr string) (int, int) {
	re := regexp.MustCompile(`\d+`)
	priceStr = strings.Join(re.FindAllString(priceStr, -1), "")
	priceValue, err := strconv.Atoi(priceStr)
	if err != nil {
		return 0, 0
	}
	minPrice := int(float64(priceValue) * 0.85)
	return minPrice, priceValue
}
