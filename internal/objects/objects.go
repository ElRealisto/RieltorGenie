package objects

import (
	"fmt"
)

// Category —Ç–∏–ø: –ø—Ä–æ–¥–∞–∂ —á–∏ –æ—Ä–µ–Ω–¥–∞
type Category string

// PropertyType —Ç–∏–ø –æ–±'—î–∫—Ç–∞: –∫–≤–∞—Ä—Ç–∏—Ä–∞, –∫—ñ–º–Ω–∞—Ç–∞ —Ç–æ—â–æ
type PropertyType string

const (
	CategorySale Category = "sale"
	CategoryRent Category = "rent"

	PropertyTypeFlat       PropertyType = "flats"
	PropertyTypeRoom       PropertyType = "rooms"
	PropertyTypeHouse      PropertyType = "houses"
	PropertyTypeCommercial PropertyType = "commercials"
	PropertyTypeLand       PropertyType = "areas"
)

// PropertyCategory –æ–ø–∏—Å—É—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–∞ —Ç–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ
type PropertyCategory struct {
	Category     Category
	Type         PropertyType
	DisplayUkr   string // –ù–∞–ø—Ä–∏–∫–ª–∞–¥: "–ö–æ–º–µ—Ä—Ü—ñ–π–Ω–∞ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å"
	RelativePath string // –ù–∞–ø—Ä–∏–∫–ª–∞–¥: "commercials-sale"
}

// PropertyCategories ‚Äî —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —ñ —Ç–∏–ø—ñ–≤
var PropertyCategories = []PropertyCategory{
	{CategorySale, PropertyTypeFlat, "–ö–≤–∞—Ä—Ç–∏—Ä–∞", "flats-sale"},
	{CategorySale, PropertyTypeRoom, "–ö—ñ–º–Ω–∞—Ç–∞", "rooms-sale"},
	{CategorySale, PropertyTypeHouse, "–ë—É–¥–∏–Ω–æ–∫", "houses-sale"},
	{CategorySale, PropertyTypeCommercial, "–ö–æ–º–µ—Ä—Ü—ñ–π–Ω–∞ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å", "commercials-sale"},
	{CategorySale, PropertyTypeLand, "–ó–µ–º–ª—è", "areas-sale"},

	{CategoryRent, PropertyTypeFlat, "–ö–≤–∞—Ä—Ç–∏—Ä–∞", "flats-rent"},
	{CategoryRent, PropertyTypeRoom, "–ö—ñ–º–Ω–∞—Ç–∞", "rooms-rent"},
	{CategoryRent, PropertyTypeHouse, "–ë—É–¥–∏–Ω–æ–∫", "houses-rent"},
	{CategoryRent, PropertyTypeCommercial, "–ö–æ–º–µ—Ä—Ü—ñ–π–Ω–∞ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å", "commercials-rent"},
	{CategoryRent, PropertyTypeLand, "–ó–µ–º–ª—è", "areas-rent"},
}

// GenerateURL —Ñ–æ—Ä–º—É—î –ø–æ–≤–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑ –æ–±'—î–∫—Ç–∞–º–∏
func GenerateURL(domain string, pc PropertyCategory) string {
	return fmt.Sprintf("https://%s/%s/", domain, pc.RelativePath)
}

// StartAutoParsingWithMonitoring –∑–∞–ø—É—Å–∫–∞—î –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥ —ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —É —Ü–∏–∫–ª—ñ
// func StartAutoParsingWithMonitoring(profileURL, parsedObjectsPath string, onUpdate func() error) {
// 	for {
// 		log.Println("üîÅ –ü–æ—á–∏–Ω–∞—î–º–æ –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—Ñ—ñ–ª—é:", profileURL)

// 		// 1. –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—Ñ—ñ–ª—é
// 		parsed, err := ParseRealtorProfile(profileURL)
// 		if err != nil {
// 			log.Printf("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥—É: %v", err)
// 			time.Sleep(10 * time.Minute)
// 			continue
// 		}

// 		// 2. –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤: []any ‚Üí []Property
// 		var properties []Property
// 		for _, item := range parsed {
// 			prop, ok := item.(Property)
// 			if !ok {
// 				log.Println("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø –ø—Ä–∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ñ –¥–æ Property")
// 				continue
// 			}
// 			properties = append(properties, prop)
// 		}

// 		// 3. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö –æ–±'—î–∫—Ç—ñ–≤ —É —Ñ–∞–π–ª
// 		anyProps := make([]any, len(properties))
// 		for i, p := range properties {
// 			anyProps[i] = p
// 		}

// 		err = SavePropertiesToFile(anyProps, parsedObjectsPath)
// 		if err != nil {
// 			log.Printf("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤: %v", err)
// 		} else {
// 			log.Printf("‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ %d –æ–±'—î–∫—Ç—ñ–≤ —É %s", len(properties), parsedObjectsPath)
// 		}

// 		// 4. –û–Ω–æ–≤–∏—Ç–∏ search_URLs.json —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–¥–∞–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
// 		if err := onUpdate(); err != nil {
// 			log.Printf("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ onUpdate: %v", err)
// 		}

// 		// 5. –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É
// 		time.Sleep(30 * time.Minute) // –∞–±–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª, —è–∫–∏–π —Ö–æ—á–µ—à
// 	}
// }
